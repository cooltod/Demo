<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quest for the Amrita</title>
    <!-- Babylon.js CDN -->
    <script src="https://cdn.babylonjs.com/babylon.js"></script>
    <script src="https://cdn.babylonjs.com/loaders/babylonjs.loaders.min.js"></script>
</head>
<body>
    <!-- Game Canvas -->
    <canvas id="renderCanvas" style="width: 100%; height: 100vh;"></canvas>

    <script>
        // Initialize Babylon.js
        const canvas = document.getElementById('renderCanvas');
        const engine = new BABYLON.Engine(canvas, true);
        const scene = new BABYLON.Scene(engine);

        // Camera
        const camera = new BABYLON.ArcRotateCamera("camera", Math.PI / 2, Math.PI / 2, 10, BABYLON.Vector3.Zero(), scene);
        camera.attachControl(canvas, true);

        // Light
        const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(0, 1, 0), scene);

        // Asset Manager to load models
        const assetManager = new BABYLON.AssetsManager(scene);

        // Updated paths to reflect current location in "assets"
        const playerTask = assetManager.addMeshTask("playerTask", "", "./assets/", "player.glb");
        const enemyTask = assetManager.addMeshTask("enemyTask", "", "./assets/", "enemy.glb");

        // Handle successful loading
        playerTask.onSuccess = (task) => {
            const playerMesh = task.loadedMeshes[0];
            playerMesh.position = new BABYLON.Vector3(-2, 0, 0);
        };

        enemyTask.onSuccess = (task) => {
            const enemyMesh = task.loadedMeshes[0];
            enemyMesh.position = new BABYLON.Vector3(2, 0, 0);
        };

        // Error handling
        playerTask.onError = (task, message, exception) => {
            console.error(`Failed to load player model: ${message}`, exception);
        };

        enemyTask.onError = (task, message, exception) => {
            console.error(`Failed to load enemy model: ${message}`, exception);
        };

        // Load assets and start rendering
        assetManager.onFinish = () => {
            engine.runRenderLoop(() => {
                scene.render();
            });
        };

        assetManager.load();

        // Handle window resize
        window.addEventListener('resize', () => {
            engine.resize();
        });
    </script>
</body>
</html>
